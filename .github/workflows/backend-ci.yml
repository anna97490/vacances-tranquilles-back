name: Backend CI - Build and Test

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - staging
      - "feature/**"
  pull_request:
    branches:
      - staging
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17

      - name: Grant execute permission to mvnw
        run: chmod +x mvnw

      - name: Run unit tests and check code coverage â‰¥ 80%
        run: |
          ./mvnw clean test

          percent=$(grep -A1 "<tfoot>" target/site/jacoco/index.html | grep -Po '\d+(?=\s*%)' | head -1)

          if [[ -z "$percent" ]]; then
            echo "Impossible de lire la couverture depuis le fichier HTML."
            exit 1
          fi

          echo "Coverage from HTML = $percent%"

          if [ "$percent" -lt 80 ]; then
            echo "Code coverage ($percent%) is below 80%. Failing the job."
            exit 1
          else
            echo "Code coverage is sufficient ($percent%)."
          fi

      - name: SonarCloud analysis
        continue-on-error: false
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=anna97490_vacances-tranquilles-back

  auto-bump-version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Detect commit types
        id: version_type
        run: |
          COMMITS=$(git log -n 10 --pretty=format:"%s")
          echo "$COMMITS" > commits.txt
          if grep -q "BREAKING CHANGE\|!\|feat!" commits.txt; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif grep -q "feat" commits.txt; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif grep -q "fix" commits.txt; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi

      - name: Bump version in pom.xml
        if: steps.version_type.outputs.type != 'none'
        run: |
          current_version=$(grep '<version>' pom.xml | sed -n '2p' | sed -E 's/.*<version>(.+)<\/version>.*/\1/')
          IFS='.' read -r major minor patch <<< "${current_version//-SNAPSHOT/}"
          case "${{ steps.version_type.outputs.type }}" in
            major)
              major=$((major + 1)); minor=0; patch=0 ;;
            minor)
              minor=$((minor + 1)); patch=0 ;;
            patch)
              patch=$((patch + 1)) ;;
          esac
          new_version="$major.$minor.$patch-SNAPSHOT"
          echo "Nouvelle version : $new_version"
          sed -i "0,/<version>.*<\/version>/s//<version> $new_version <\/version>/" pom.xml
          git add pom.xml
          git commit -m "ci: bump version to $new_version [skip ci]"
          git push origin main

  deploy-to-render:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test, auto-bump-version]

    steps:
      - name: Trigger Render deploy
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}
