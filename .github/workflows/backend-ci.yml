name: Backend CI - Build and Test

on:
  push:
    branches:
      - main
      - staging
      - 'feature/**'
  pull_request:
    branches:
      - staging
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Grant execute permission to mvnw
        run: chmod +x mvnw

      - name: Run unit tests and check code coverage â‰¥ 80%
        run: |
          ./mvnw test
          coverage=$(grep -Po '(?<=<line-rate>)[^<]+' target/site/jacoco/jacoco.xml | head -1)
          percent=$(awk "BEGIN { printf \"%.0f\n\", $coverage * 100 }")
          echo "Coverage = $percent%"
          if [ "$percent" -lt 80 ]; then
            echo "Code coverage ($percent%) is below 80%. Failing the job."
            exit 1
          else
            echo "Code coverage is sufficient ($percent%)."
          fi

      - name: SonarCloud analysis (non-blocking)
        continue-on-error: true
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=anna97490_vacances-tranquilles-back \
            -Dsonar.organization=anna97490 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  auto-bump-version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Detect commit types
        id: version_type
        run: |
          COMMITS=$(git log origin/main..HEAD --pretty=format:"%s")
          echo "$COMMITS" > commits.txt
          if grep -q "BREAKING CHANGE\|!\|feat!" commits.txt; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif grep -q "feat" commits.txt; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif grep -q "fix" commits.txt; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT

      - name: Bump version in pom.xml
        if: steps.version_type.outputs.type != 'none'
        run: |
          current_version=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.+)<\/version>.*/\1/')
          IFS='.' read -r major minor patch <<< "${current_version//-SNAPSHOT/}"
          case "${{ steps.version_type.outputs.type }}" in
            major)
              major=$((major + 1)); minor=0; patch=0 ;;
            minor)
              minor=$((minor + 1)); patch=0 ;;
            patch)
              patch=$((patch + 1)) ;;
          esac
          new_version="$major.$minor.$patch-SNAPSHOT"
          echo "Nouvelle version : $new_version"
          sed -i "0,/<version>.*<\/version>/s//<version>$new_version<\/version>/" pom.xml
          git add pom.xml
          git commit -m "ci: bump version to $new_version [skip ci]"
          git push origin main


  # Ajouter uplaod des logs si failure sur Render

  deploy-to-render:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test, auto-bump-version]

    steps:
      - name: Trigger Render deploy
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}
